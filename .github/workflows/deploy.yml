name: Kubernetes Deploy CD

on:
  push:
    branches:
      - master
  repository_dispatch:
    types: [build-completed]
  workflow_dispatch:

concurrency:
  group: deploy-environment
  cancel-in-progress: false  # Prevents new deployments from canceling an ongoing one

jobs:
  deploy:
    runs-on: self-hosted
    env:
      KUBECONFIG: /root/.kube/config
    steps:
      - name: Check for Running Deployments
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RUNNING_WORKFLOWS=$(gh run list --repo ${{ github.repository }} --workflow deploy.yml --status in_progress --json databaseId --jq 'length')
          if [ "$RUNNING_WORKFLOWS" -gt 0 ]; then
            echo "ðŸš¨ Another deployment is already running. Exiting."
            exit 0
          fi
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Wait for all builds to complete
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const checkRuns = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
            });

            const builds = checkRuns.data.check_runs.filter(check => check.name.includes("build"));
            
            console.log("Waiting for all builds:", builds.map(b => b.name));

            let allCompleted = false;
            while (!allCompleted) {
              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10s before retrying

              const updatedChecks = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.ref,
              });

              const updatedBuilds = updatedChecks.data.check_runs.filter(check => check.name.includes("build"));
              allCompleted = updatedBuilds.every(b => b.status === "completed");

              console.log("Current statuses:", updatedBuilds.map(b => `${b.name}: ${b.status}`));
            }

            console.log("All builds completed!");

      - name: Update Kubernetes Deployment
        run: |
            kubectl set image deployment/public-library-system public-library-system-api=ninepiece2/public-library-system:api public-library-system-ui=ninepiece2/public-library-system:ui -n coe892
            kubectl annotate deployment public-library-system kubernetes.io/change-cause="Updated API image to ninepiece2/public-library-system:api and UI image to ninepiece2/public-library-system:ui" --overwrite -n coe892
            kubectl rollout restart deployment/public-library-system -n coe892

